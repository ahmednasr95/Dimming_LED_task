
Dimming_LED_task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000039c  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000003cb  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  000003d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000174a  00000000  00000000  000004e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e5  00000000  00000000  00001c33  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000838  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00002c50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f4  00000000  00000000  00002df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c2  00000000  00000000  00002fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000033a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000316  00000316  0000038a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003468  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.test_TIMER 00000010  000002fe  000002fe  00000372  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000062  00000230  00000230  000002a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_10 00000014  000002d8  000002d8  0000034c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.DIO_SetPinDir 000000e2  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.DIO_SetPinVal 000000e2  0000014e  0000014e  000001c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.SET_GlobalInterrupt 00000008  0000030e  0000030e  00000382  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.INT_TIMER0_Init 00000012  000002ec  000002ec  00000360  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.TIMER0_Init 00000030  00000292  00000292  00000306  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.TIMER0_Write 00000004  0000031a  0000031a  0000038e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_fini 00000002  00000322  00000322  00000396  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_funcs_on_exit 00000002  00000324  00000324  00000398  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_simulator_exit 00000002  00000326  00000326  0000039a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.exit    00000016  000002c2  000002c2  00000336  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text._Exit   00000004  0000031e  0000031e  00000392  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
   8:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
   c:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
  10:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
  14:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
  18:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
  1c:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
  20:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
  24:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
  28:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__vector_10>
  2c:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
  30:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
  34:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
  38:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
  3c:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
  40:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
  44:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
  48:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
  4c:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>
  50:	0c 94 8b 01 	jmp	0x316	; 0x316 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 18 01 	call	0x230	; 0x230 <main>
  64:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000316 <__bad_interrupt>:
 316:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.test_TIMER:

000002fe <test_TIMER>:
 */ 

#include "TIMER0.h"

void test_TIMER(){
	TIMER0_Init();
 2fe:	0e 94 49 01 	call	0x292	; 0x292 <TIMER0_Init>
	DIO_SetPinDir(DIO_PORTB, DIO_PIN3, DIO_PIN_OUTPUT);
 302:	41 e0       	ldi	r20, 0x01	; 1
 304:	63 e0       	ldi	r22, 0x03	; 3
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
 30c:	08 95       	ret

Disassembly of section .text.main:

00000230 <main>:

int main(void)
{
	UINT8_t index = 0;
	
	DIO_SetPinDir(DIO_PORTA, DIO_PIN5, DIO_PIN_OUTPUT);
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	65 e0       	ldi	r22, 0x05	; 5
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
	DIO_SetPinVal(DIO_PORTA, DIO_PIN5, DIO_PIN_HIGH);
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	65 e0       	ldi	r22, 0x05	; 5
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinVal>
	
	test_TIMER();
 244:	0e 94 7f 01 	call	0x2fe	; 0x2fe <test_TIMER>
	DIO_SetPinDir(DIO_PORTB, DIO_PIN3, DIO_PIN_OUTPUT);
}

int main(void)
{
	UINT8_t index = 0;
 248:	c0 e0       	ldi	r28, 0x00	; 0
 24a:	0a c0       	rjmp	.+20     	; 0x260 <main+0x30>
	
	test_TIMER();
    while(1)
    {
        for(; 255 > index; ++index){
	        TIMER0_Write(index);
 24c:	8c 2f       	mov	r24, r28
 24e:	0e 94 8d 01 	call	0x31a	; 0x31a <TIMER0_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	8f e3       	ldi	r24, 0x3F	; 63
 254:	9c e9       	ldi	r25, 0x9C	; 156
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <main+0x26>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x2c>
 25c:	00 00       	nop
	DIO_SetPinVal(DIO_PORTA, DIO_PIN5, DIO_PIN_HIGH);
	
	test_TIMER();
    while(1)
    {
        for(; 255 > index; ++index){
 25e:	cf 5f       	subi	r28, 0xFF	; 255
 260:	cf 3f       	cpi	r28, 0xFF	; 255
 262:	a1 f7       	brne	.-24     	; 0x24c <main+0x1c>
 264:	9f ef       	ldi	r25, 0xFF	; 255
 266:	21 ee       	ldi	r18, 0xE1	; 225
 268:	84 e0       	ldi	r24, 0x04	; 4
 26a:	91 50       	subi	r25, 0x01	; 1
 26c:	20 40       	sbci	r18, 0x00	; 0
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0x3a>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x44>
 274:	00 00       	nop
 276:	0a c0       	rjmp	.+20     	; 0x28c <main+0x5c>
	        TIMER0_Write(index);
	        _delay_ms(10);
        }
        _delay_ms(100);
        for( ; 0 < index; --index){
	        TIMER0_Write(index);
 278:	8c 2f       	mov	r24, r28
 27a:	0e 94 8d 01 	call	0x31a	; 0x31a <TIMER0_Write>
 27e:	8f e3       	ldi	r24, 0x3F	; 63
 280:	9c e9       	ldi	r25, 0x9C	; 156
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <main+0x52>
 286:	00 c0       	rjmp	.+0      	; 0x288 <main+0x58>
 288:	00 00       	nop
        for(; 255 > index; ++index){
	        TIMER0_Write(index);
	        _delay_ms(10);
        }
        _delay_ms(100);
        for( ; 0 < index; --index){
 28a:	c1 50       	subi	r28, 0x01	; 1
 28c:	c1 11       	cpse	r28, r1
 28e:	f4 cf       	rjmp	.-24     	; 0x278 <main+0x48>
 290:	e7 cf       	rjmp	.-50     	; 0x260 <main+0x30>

Disassembly of section .text.__vector_10:

000002d8 <__vector_10>:
	        _delay_ms(10);
        }
	}
}

ISR (TIMER0_COMP_vect){
 2d8:	1f 92       	push	r1
 2da:	0f 92       	push	r0
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	0f 92       	push	r0
 2e0:	11 24       	eor	r1, r1
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

Disassembly of section .text.DIO_SetPinDir:

0000006c <DIO_SetPinDir>:
				break;
			case DIO_PORTC:
				PORTC_DATA = Val;
				break;
			case DIO_PORTD:
				PORTD_DATA = Val;
  6c:	44 23       	and	r20, r20
  6e:	b9 f1       	breq	.+110    	; 0xde <DIO_SetPinDir+0x72>
  70:	41 30       	cpi	r20, 0x01	; 1
  72:	09 f0       	breq	.+2      	; 0x76 <DIO_SetPinDir+0xa>
  74:	6b c0       	rjmp	.+214    	; 0x14c <DIO_SetPinDir+0xe0>
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	89 f0       	breq	.+34     	; 0x9c <DIO_SetPinDir+0x30>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_SetPinDir+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	c9 f0       	breq	.+50     	; 0xb2 <DIO_SetPinDir+0x46>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	11 f1       	breq	.+68     	; 0xc8 <DIO_SetPinDir+0x5c>
  84:	08 95       	ret
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_SetPinDir+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_SetPinDir+0x22>
  96:	82 2b       	or	r24, r18
  98:	8a bb       	out	0x1a, r24	; 26
  9a:	08 95       	ret
  9c:	27 b3       	in	r18, 0x17	; 23
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPinDir+0x3c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPinDir+0x38>
  ac:	82 2b       	or	r24, r18
  ae:	87 bb       	out	0x17, r24	; 23
  b0:	08 95       	ret
  b2:	24 b3       	in	r18, 0x14	; 20
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_SetPinDir+0x52>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_SetPinDir+0x4e>
  c2:	82 2b       	or	r24, r18
  c4:	84 bb       	out	0x14, r24	; 20
  c6:	08 95       	ret
  c8:	21 b3       	in	r18, 0x11	; 17
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_SetPinDir+0x68>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_SetPinDir+0x64>
  d8:	82 2b       	or	r24, r18
  da:	81 bb       	out	0x11, r24	; 17
  dc:	08 95       	ret
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 f0       	breq	.+36     	; 0x106 <DIO_SetPinDir+0x9a>
  e2:	28 f0       	brcs	.+10     	; 0xee <DIO_SetPinDir+0x82>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	d9 f0       	breq	.+54     	; 0x11e <DIO_SetPinDir+0xb2>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	29 f1       	breq	.+74     	; 0x136 <DIO_SetPinDir+0xca>
  ec:	08 95       	ret
  ee:	2a b3       	in	r18, 0x1a	; 26
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPinDir+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPinDir+0x8a>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	8a bb       	out	0x1a, r24	; 26
 104:	08 95       	ret
 106:	27 b3       	in	r18, 0x17	; 23
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPinDir+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPinDir+0xa2>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	08 95       	ret
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPinDir+0xbe>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPinDir+0xba>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
 136:	21 b3       	in	r18, 0x11	; 17
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SetPinDir+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SetPinDir+0xd2>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

Disassembly of section .text.DIO_SetPinVal:

0000014e <DIO_SetPinVal>:
		/*handle errors*/
	}
}

void DIO_SetPinVal(UINT8_t Port, UINT8_t Pin, UINT8_t Val){
	switch(Val){
 14e:	44 23       	and	r20, r20
 150:	b9 f1       	breq	.+110    	; 0x1c0 <DIO_SetPinVal+0x72>
 152:	41 30       	cpi	r20, 0x01	; 1
 154:	09 f0       	breq	.+2      	; 0x158 <DIO_SetPinVal+0xa>
 156:	6b c0       	rjmp	.+214    	; 0x22e <DIO_SetPinVal+0xe0>
		case DIO_PIN_HIGH:
		switch(Port){
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	89 f0       	breq	.+34     	; 0x17e <DIO_SetPinVal+0x30>
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_SetPinVal+0x1a>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	c9 f0       	breq	.+50     	; 0x194 <DIO_SetPinVal+0x46>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	11 f1       	breq	.+68     	; 0x1aa <DIO_SetPinVal+0x5c>
 166:	08 95       	ret
			case DIO_PORTA:
				SET_BIT(PORTA_DATA, Pin);
 168:	2b b3       	in	r18, 0x1b	; 27
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_SetPinVal+0x26>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_SetPinVal+0x22>
 178:	82 2b       	or	r24, r18
 17a:	8b bb       	out	0x1b, r24	; 27
				break;
 17c:	08 95       	ret
			case DIO_PORTB:
				SET_BIT(PORTB_DATA, Pin);
 17e:	28 b3       	in	r18, 0x18	; 24
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPinVal+0x3c>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPinVal+0x38>
 18e:	82 2b       	or	r24, r18
 190:	88 bb       	out	0x18, r24	; 24
				break;
 192:	08 95       	ret
			case DIO_PORTC:
				SET_BIT(PORTC_DATA, Pin);
 194:	25 b3       	in	r18, 0x15	; 21
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SetPinVal+0x52>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SetPinVal+0x4e>
 1a4:	82 2b       	or	r24, r18
 1a6:	85 bb       	out	0x15, r24	; 21
				break;
 1a8:	08 95       	ret
			case DIO_PORTD:
				SET_BIT(PORTD_DATA, Pin);
 1aa:	22 b3       	in	r18, 0x12	; 18
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_SetPinVal+0x68>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_SetPinVal+0x64>
 1ba:	82 2b       	or	r24, r18
 1bc:	82 bb       	out	0x12, r24	; 18
				break;
 1be:	08 95       	ret
			/*handle errors using default*/
		}
		break;
		case DIO_PIN_LOW:
			switch(Port){
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	91 f0       	breq	.+36     	; 0x1e8 <DIO_SetPinVal+0x9a>
 1c4:	28 f0       	brcs	.+10     	; 0x1d0 <DIO_SetPinVal+0x82>
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	d9 f0       	breq	.+54     	; 0x200 <DIO_SetPinVal+0xb2>
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	29 f1       	breq	.+74     	; 0x218 <DIO_SetPinVal+0xca>
 1ce:	08 95       	ret
				case DIO_PORTA:
					CLEAR_BIT(PORTA_DATA, Pin);
 1d0:	2b b3       	in	r18, 0x1b	; 27
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_SetPinVal+0x8e>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_SetPinVal+0x8a>
 1e0:	80 95       	com	r24
 1e2:	82 23       	and	r24, r18
 1e4:	8b bb       	out	0x1b, r24	; 27
					break;
 1e6:	08 95       	ret
				case DIO_PORTB:
					CLEAR_BIT(PORTB_DATA, Pin);
 1e8:	28 b3       	in	r18, 0x18	; 24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_SetPinVal+0xa6>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_SetPinVal+0xa2>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	88 bb       	out	0x18, r24	; 24
					break;
 1fe:	08 95       	ret
				case DIO_PORTC:
					CLEAR_BIT(PORTC_DATA, Pin);
 200:	25 b3       	in	r18, 0x15	; 21
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_SetPinVal+0xbe>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_SetPinVal+0xba>
 210:	80 95       	com	r24
 212:	82 23       	and	r24, r18
 214:	85 bb       	out	0x15, r24	; 21
					break;
 216:	08 95       	ret
				case DIO_PORTD:
					CLEAR_BIT(PORTD_DATA, Pin);
 218:	22 b3       	in	r18, 0x12	; 18
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_SetPinVal+0xd6>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_SetPinVal+0xd2>
 228:	80 95       	com	r24
 22a:	82 23       	and	r24, r18
 22c:	82 bb       	out	0x12, r24	; 18
 22e:	08 95       	ret

Disassembly of section .text.SET_GlobalInterrupt:

0000030e <SET_GlobalInterrupt>:
#include "EXT_INT.h"

void SET_GlobalInterrupt(){
	#if GLOBAL_INTERRUPT == GLOBAL_INTERRUPT_ENABLE
	
	SET_BIT(STATUS_REG,7);
 30e:	8f b7       	in	r24, 0x3f	; 63
 310:	80 68       	ori	r24, 0x80	; 128
 312:	8f bf       	out	0x3f, r24	; 63
 314:	08 95       	ret

Disassembly of section .text.INT_TIMER0_Init:

000002ec <INT_TIMER0_Init>:
 */ 

#include "TIMER_INT.h"

void INT_TIMER0_Init(){
	SET_GlobalInterrupt();
 2ec:	0e 94 87 01 	call	0x30e	; 0x30e <SET_GlobalInterrupt>
	SET_BIT(TIMER_I_MASK_R, TIMER0_OV_MASK_BIT);
	CLEAR_BIT(TIMER_I_MASK_R, TIMER0_OC_MASK_BIT);
	
	#elif TIMER0_INT_MODE == TIMER0_INT_OC
	
	SET_BIT(TIMER_I_MASK_R, TIMER0_OC_MASK_BIT);
 2f0:	89 b7       	in	r24, 0x39	; 57
 2f2:	82 60       	ori	r24, 0x02	; 2
 2f4:	89 bf       	out	0x39, r24	; 57
	CLEAR_BIT(TIMER_I_MASK_R, TIMER0_OV_MASK_BIT);
 2f6:	89 b7       	in	r24, 0x39	; 57
 2f8:	8e 7f       	andi	r24, 0xFE	; 254
 2fa:	89 bf       	out	0x39, r24	; 57
 2fc:	08 95       	ret

Disassembly of section .text.TIMER0_Init:

00000292 <TIMER0_Init>:
	CLEAR_BIT(TIMER0_CONTROL_R, TIMER0_CS02_BIT);
}

UINT8_t TIMER0_Read(){
	return TIMER0_ACC_R;
}
 292:	83 b7       	in	r24, 0x33	; 51
 294:	81 60       	ori	r24, 0x01	; 1
 296:	83 bf       	out	0x33, r24	; 51
 298:	83 b7       	in	r24, 0x33	; 51
 29a:	82 60       	ori	r24, 0x02	; 2
 29c:	83 bf       	out	0x33, r24	; 51
 29e:	83 b7       	in	r24, 0x33	; 51
 2a0:	8b 7f       	andi	r24, 0xFB	; 251
 2a2:	83 bf       	out	0x33, r24	; 51
 2a4:	83 b7       	in	r24, 0x33	; 51
 2a6:	80 64       	ori	r24, 0x40	; 64
 2a8:	83 bf       	out	0x33, r24	; 51
 2aa:	83 b7       	in	r24, 0x33	; 51
 2ac:	88 60       	ori	r24, 0x08	; 8
 2ae:	83 bf       	out	0x33, r24	; 51
 2b0:	83 b7       	in	r24, 0x33	; 51
 2b2:	80 61       	ori	r24, 0x10	; 16
 2b4:	83 bf       	out	0x33, r24	; 51
 2b6:	83 b7       	in	r24, 0x33	; 51
 2b8:	80 62       	ori	r24, 0x20	; 32
 2ba:	83 bf       	out	0x33, r24	; 51
 2bc:	0e 94 76 01 	call	0x2ec	; 0x2ec <INT_TIMER0_Init>
 2c0:	08 95       	ret

Disassembly of section .text.TIMER0_Write:

0000031a <TIMER0_Write>:

void TIMER0_Write(UINT8_t val){
	TIMER0_COMP_R = val;	
 31a:	8c bf       	out	0x3c, r24	; 60
 31c:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000322 <_fini>:
 322:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000324 <__funcs_on_exit>:
 324:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000326 <__simulator_exit>:
 326:	08 95       	ret

Disassembly of section .text.exit:

000002c2 <exit>:
 2c2:	ec 01       	movw	r28, r24
 2c4:	0e 94 92 01 	call	0x324	; 0x324 <__funcs_on_exit>
 2c8:	0e 94 91 01 	call	0x322	; 0x322 <_fini>
 2cc:	ce 01       	movw	r24, r28
 2ce:	0e 94 93 01 	call	0x326	; 0x326 <__simulator_exit>
 2d2:	ce 01       	movw	r24, r28
 2d4:	0e 94 8f 01 	call	0x31e	; 0x31e <_Exit>

Disassembly of section .text._Exit:

0000031e <_Exit>:
 31e:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
